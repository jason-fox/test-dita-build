<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="unit-test-file-structure">
  <title>Unit Test File Structure</title>
  <body>
    <p>
       The unit tests are organized in the following manner:
    </p>
    <codeblock scale="80" outputclass="language-none">├── test-suite-A
│   └── test
│       ├── unit-test-1
│       ├── unit-test-2
│       ├── ... etc
│       ├── bootstrap.xml
│       └── coverage.xml
│
├── test-suite-B
│   └── test
│       ├── unit-test-1
│       ├── unit-test-2
│       ├── ... etc
│       ├── bootstrap.xml
│       └── coverage.xml</codeblock>
    <p>
       Each suite of tests (identified by a directory called <filepath>test</filepath>)
       can be found in a separate directory. Each test within the suite can be found
       in a separate sub-directory. A <codeph>coverage.xml</codeph> file should be
       added to each test suite to enable the framework to calculate coverage.
    </p>
    <p>
       This structure means that an integration test of multiple plug-ins can be run by
       adding a <filepath>test</filepath> directory to each plug-in and invoking the
       tests as shown:
    </p>
    <codeblock scale="80" outputclass="language-bash"><cmdname>dita</cmdname> <parmname>--format</parmname> <option>unit-test</option> \
     <parmname>--input</parmname> ./plugins
    </codeblock>
  </body>
  <topic id="test-suite-files">
    <title outputclass="h3 mt-3">Test suite files</title>
    <body>
      <section id="bootstrap.xml-file">
         <title outputclass="h4 mt-3"><codeph>bootstrap.xml</codeph> file
        </title>
        <p>
           At the root of the tests lies a <codeph>bootstrap.xml</codeph> file which
           references the <codeph>antlib.xml</codeph> library as shown:
        </p>
        <codeblock scale="80" outputclass="language-xml"><coderef href="./src/bootstrap.xml"/></codeblock>
        <ul>
          <li>
             The location of <parmname>test.root.dir</parmname> must be set - this allows the
             expecation of a single test to be updated directly from the command line
             independently of the test harness.
          </li>
          <li>
             The location of <parmname>dita.dir</parmname> must be set - this allows a single
             test to be run directly from the command line independently of the test harness.
          </li>
          <li>
             The functions from the unit-test <codeph>antlib.xml</codeph> must be loaded
             using the <xmlelement>typedef</xmlelement> task.
          </li>
        </ul>
      </section>
      <section id="coverage.xml-file">
         <title outputclass="h4 mt-3"><codeph>coverage.xml</codeph> file
        </title>
        <p>
           A token coverage file consists of a list of XML elements or string literals
           which should be present in a test-suite’s outputs. For example, PDF tests
           should cover all possible fop element and attributes.
        </p>
        <codeblock scale="80" outputclass="language-xml"><coderef href="./src/coverage.xml"/></codeblock>
      </section>
      <section id="template-coverage.xml-file">
         <title outputclass="h4 mt-3"><codeph>template-coverage.xml</codeph> file
        </title>
        <p>
           An XSL coverage file consists of a list of XSL elements which are present within
           a plug-in. This file is generated by the <option>xsl-instrument</option> transform.
        </p>
        <codeblock scale="80" outputclass="language-xml"><coderef href="./src/template-coverage.xml"/></codeblock>
      </section>
      <section id="disabled.txt-file">
         <title outputclass="h4 mt-3"><codeph>disabled.txt</codeph> file
        </title>
        <p>
           If a <codeph>disabled.txt</codeph> file is present within a test suite
           directory, none of the tests within the directory will be run.
        </p>
      </section>
      <section id="overrides-for-attributes.xml-colors.xml-and-fonts.xml">
         <title outputclass="h4 mt-3">Overrides for <codeph>attributes.xml</codeph>,
         <codeph>colors.xml</codeph> and <codeph>fonts.xml</codeph>
        </title>
        <p>
           The <codeph>cfg</codeph> directory of the plug-in holds standard lists of fonts,
           colors and attributes to replace when running PDF tests - this can be
           overridden by individuals test or test suites if necessary by placing an
           equivalent override file in the test directory or test-suite directory.
        </p>
      </section>
      <section id="overrides-for-test.properties">
         <title outputclass="h4 mt-3">Overrides for <codeph>test.properties</codeph>
        </title>
        <p>
           Additional test properties can be passed to DITA-OT when each test is run if a
           <codeph>test.properties</codeph> file is present in the test directory or
           test-suite directory. The name of the file to search for can also be altered.
           See <xref
           href="http://www.dita-ot.org/3.0/topics/using-dita-properties-file.html"
           format="html" scope="external">Setting build parameters with <codeph>.properties</codeph>
           files</xref> for more details.
        </p>
      </section>
    </body>
  </topic>
  <topic id="individual-test-files">
    <title outputclass="h3 mt-3">Individual test files</title>
    <body>
      <p>
         Each unit test is organized in the following manner:
      </p>
      <codeblock scale="80" outputclass="language-none">├── build.xml
├── document.ditamap
├── expected.html
├── test.properties (optional)
└── topics
    └── *.dita files</codeblock>
      <ul>
        <li>
           An ANT <codeph>build.xml</codeph> file to invoke the test
        </li>
        <li>
           A <codeph>document.ditamap</codeph> referring to the individual <codeph>*.dita</codeph> files
        </li>
        <li>
           An optional <codeph>test.properties</codeph> file if passing any additional
           properties to DITA-OT
        </li>
        <li>
           A test expectation (usually called <codeph>expected.html</codeph> or
           <codeph>expected.fo</codeph>)
        </li>
        <li>
           Any further <codeph>*.dita</codeph> files or source files, graphics etc.
           required for the test.
        </li>
      </ul>
      <p>
         The <codeph>build.xml</codeph> must consist of a single default target, and <codeph>import</codeph>
         the <codeph>bootstrap.xml</codeph> file as shown. The <codeph>description</codeph>
         is used within the test report.
      </p>
      <codeblock scale="80" outputclass="language-xml"><coderef href="./src/ant-target.xml"/></codeblock>
      <ul>
        <li>
           An individual test can be run directly from the command line by running the
           default target.
        </li>
        <li>
           Adding the comment <codeph>&lt;!-- @disabled --&gt;</codeph> within the <codeph>build.xml</codeph>
           file will disable a test
        </li>
      </ul>
    </body>
  </topic>
</topic>